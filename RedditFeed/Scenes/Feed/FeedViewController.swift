//
//  FeedViewController.swift
//  RedditFeed
//
//  Created by Danny on 8/20/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FeedDisplayLogic: AnyObject
{
    func displayFetchFeed(viewModel: Feed.FetchFeed.ViewModel)
}

class FeedViewController: UITableViewController, FeedDisplayLogic
{
    var interactor: FeedBusinessLogic?
    var router: (NSObjectProtocol & FeedRoutingLogic & FeedDataPassing)?
    

    var hasMorePosts = true
    var isFetching = false
    
    var posts: [Post] = [] {
        didSet {
            tableView.reloadData()
        }
    }
    
    // MARK: Object lifecycle
    
    override init(style: UITableView.Style) {
        super.init(style: style)
        
        setup()
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FeedInteractor()
        let presenter = FeedPresenter()
        let router = FeedRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        title = "Feed"
        
        configureTableView()
        
        fetchNextFeed()
    }
    
    // MARK: Fetch Feed
    
    func fetchNextFeed()
    {
        if isFetching || !hasMorePosts { return }
        isFetching = true
        
        let request = Feed.FetchFeed.Request(afterLink: posts.last?.name)
        interactor?.fetchFeed(request: request)
    }
    
    func displayFetchFeed(viewModel: Feed.FetchFeed.ViewModel)
    {
        self.hasMorePosts = viewModel.hasMore
        
        if let error = viewModel.error {
            print("Fetch feed error: \(error)")
        } else {
            print("Fetched \(viewModel.posts.count) rows")
            
            self.posts.append(contentsOf: viewModel.posts)
        }
        
        self.isFetching = false
    }
}

private extension FeedViewController {
    func configureTableView() {
        tableView.register(FeedTableViewCell.self, forCellReuseIdentifier: "feedCell")
        
        tableView.separatorStyle = .none
    }
}
extension FeedViewController {
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return posts.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "feedCell", for: indexPath) as! FeedTableViewCell
        
        let post = posts[indexPath.row]
        cell.configure(post, cellWidth: tableView.bounds.width)
        
        cell.selectionStyle = .none
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // if reached to the end of the table view, load next batch of posts
        if indexPath.row == posts.count - 1 {
            fetchNextFeed()
        }
    }
}
